1.tcp的三次握手
  场景：c发起请求连接s确认
  第一次握手：s只可以确认自己可以接受c发送的报文
  第二次握手：c可以确认s收到了自己发送的报文
  第三次握手：s可以确认c收到了自己发动的报文

2.tcp,udp的区别
  1.tcp是面向连接的，发送数据前需要建立连接，upd无连接
  2.tcp提供可靠的服务，udp尽最大努力交付
  3.tcp只能是1对1，udp可以1对多
  4.tcp面向字节，udp面向报文
  5.tcp首部20字节，udp8字节

3.websocket
  1.websokcet是html5中的协议，支持持久连接
  2.websocket是基于http协议的，在握手阶段是与http相同的
  3.Upgrade:webSocket; Connection:Upgrade告诉服务器发送的是websocket

4.http2.0
  提升访问速度、允许多路复用、二进制分帧、首部压缩、服务器推送

5.400 401 403状态码
  400：请求无效：前后台数据结构不一致、json没有转化为字符串发送
  401：当前请求需要得到用户验证
  403：服务器已经得到请求，但是拒绝执行

6.cookie,sessionStorage,localStorage
  共同点：都是保存在浏览器端，并且都是同源的
  cookie:始终在同源的http请求中携带，在服务器和浏览器之间来回传递，存储大小只有4k左右
  sessionStorage：不能持久保存，浏览器关闭后消失
  localStorage:同源共享，持久保存
  cookie的作用：保存登录状态，跟踪户用行为

7.web worker
  web worker是运行在后台的js，独立于其它脚本，不会阻塞主线程

8.iframe
  iframe内联框架
  缺点：阻塞主页面onload事件、不利于seo、和主页面共享连接池，影响性能

9.Doctype
  申明位于文档最前面，用于告诉浏览器用什么方式来渲染页面
  严格模式，混杂模式

10. XSS
  攻击者在返回的HTML中嵌入js脚本
  cookie防范xss攻击方法：在http头部添加 set-cookie

11. click ios 300ms延迟
  1.禁用缩放
  2.检测到touchend事件，立刻触发模拟click事件，preventDefault

12. 强缓存，协商缓存
  强缓存expires,cache-conrol      200   直接从缓存中读取
  协商缓存：Last-Modified/If-Modified-Since, ETag/If-None-Match    304

13. 前端优化
  1.降低请求量：合并资源（雪碧图），gzip压缩，懒加载
  2.加快请求速度：cdn分发，并行加载
  3.缓存：http协议缓存，离线数据缓存
  4.渲染：js/css优化，加载顺序

14. Get和Post的区别
  1. get通过url传参，post放在request body中
  2. get请求在url中传递的参数是有长度限制的
  3. get不安全
  4. get只能进行url编码
  5. get产生一个tcp数据包，post产生两个tcp数据包

15. 301,302
  301：被请求的资源已经永久移动到新的位置  域名跳转
  302： 临时重定向  临时跳转 未登录用户访问用户中心重定向到登录页面

16. css画三角形
  宽高为0，边框为10，其余三边transparent

17. h5新增元素
  语义化标签：header,footer,nav,aside,section
  表单：input:color,email,data,range
  存储：sessionStorage,localStorage
  媒体：audio, video
  地理定位，canvas画布，拖放，web worker, websocket

18. 在地址栏输入一个url，到这个页面呈现出来中间的流程  
  DNS解析->Tcp连接->发送http请求->服务器返回http报文->浏览器解析渲染->连接结束
  1.找这个url域名的服务器ip 浏览器缓存-》系统缓存-》路由器缓存-》hosts文件-》查询DNS服务器
  2.得到服务器ip后，浏览器根据这个ip和对顶的端口号，构造一个http请求，包含请求信息，请求方法，请求说明，请求附带数据
  3.将这个http请求封装到一个tcp包中，-》传输层-》网络层-》数据链路层-》物理层-》到达服务器
  4.服务器返回html文件给浏览器
  5.dom树-》cssom树-》渲染树-》布局-》渲染

19. css盒模型
  border-box, content-box

20. Flex布局
  flex-direction, justify-content, align-items, flex-wrap, flex-flow
  order, flex, align-self

21. BFC 块级格式化上下文（清除浮动，防止margin重叠）
  BFC区域不会与float box重叠
  BFC是页面上的一个独立容器，子元素不会影响到外面
  计算BFC的高度时，浮动元素也会参与计算

22. 垂直居中
  1. 子绝父相 + left,top,right,bottom全为0 + margin:auto
  2. 子绝父相 + left:50%,top:50% + transform:translate(-50%,-50%)
  3. flex: align-items:center; justify-content:center

23. 外边距重叠问题
  1.两个相邻的外边距都是正数时，取较大值
  2.都是负数时，取绝对值较大值
  3. 一正一负，相加值

24. 清除浮动
  1. 添加空元素，空元素的class为clear，{clear:both;}
  2. overflow:hidden/auto
  3. after伪元素+clear

25. css选择器以及优先级
  1. id选择器，class选择器， 标签选择器， 伪元素选择器， 伪类选择器，
     子选择器，包含选择器，兄弟选择器（~） 相邻选择器（+），全局选择器（*）
      群选择器（，），属性选择器，伪类选择器

26. 重排（回流），重绘

27. get请求误区
  get请求参数的大小存在限制，http协议并没有限制这个，这个是浏览器或web服务器限制的
  get用于用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存，post一般会与数据库交互
    所以不能使用缓存

28. 闭包
  闭包就是能够读取其他函数内部变量的函数

29. 类的继承
  1.原型链继承：Child.prototype = new Parent()
   弊端：parent实例中的引用属性变成了原型属性，子类型在实例化的时候无法给父类型构造函数传参
  2.盗用构造函数：在子类构造函数中调用父类构造函数，通过call,apply
   弊端：必须在构造函数中定义方法，定义的这些方法不能重用，子类无法范文父类原型上的方法
  3.组合继承（原型链继承 + 盗用构造函数继承）
  4.寄生组合继承（完美）
function inherit(parent, child) {
  let p = Object.create(parent.prototype);
  child.prototype = p;
  p.constructor = child;
}

function Parent(name, age) {
  this.name = name;
  this.age = age;
}
Parent.prototype.say = function(){console.log('father');}

function Child(name,age,grade) {
  Parent.call(this, name, age, grade);
  this.age = age;
}
Child.prototype.write = function(){console.log('write');}

inherit(Parent, Child);

30. 前端中的事件流
  事件捕获-》到达目标-》事件冒泡

31. mouseover和mouseenter
  mouseover是冒泡的
  mouseenter是不冒泡的

32. js的new操作符做了那些事情
  1. 新生成一个对象
  2. 将这个对象的__proto__设置为该构造函数
  3. 将this设置为该对象
  4. 执行构造函数内部代码
  5. 若函数内部无对象返回就返回这个新建对象

33. apply, call, bind的区别

34. 各种height,top
  clientHeight：可视区域高度，不包含border和滚动条
  offsetHeight：可视区域高度，包含border和滚动条
  scrollHeight：所有可视区域的高度， 包含被滚动隐藏的部分
  clientTop: 边框border的厚度
  scrollTop：滚动后被隐藏的高度

35. 异步加载js
  async(外部脚本) defer(只支持ie)

36. Ajax解决浏览器缓存问题
  在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。
  在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。
  在 URL 后面加上一个随机数： "fresh=" + Math.random()。
  在 URL 后面加上时间搓："nowtime=" + new Date().getTime()。

37. 原生Ajax
var xhr = new XMLHttpRequest();
xhr.open('get', url);
xhr.send(data);
xhr.onreadystatechange = function() {
  if(xhr.status === 200 && xhr.readyState === 4) {
  //成功收到数据
  console.log(xhr.responseText)
  }
}

38. js监听对象属性的改变
  Object.defineProperty(obj, 'name', {
    set: function(key, value){
      
    }
  })

  proxy

39. setTimeout, setInterval 和 requestAnimationFrame之间的区别
  requestAnimationFrame采用的是系统时间间隔，另外两个是运行时间间隔（可能不准确）
  requestAnimationFrame把一帧中的所有dom操作集中起来，一次完成
  requestAnimationFrame不会对隐藏或者不可见的元素进行重绘回流
  requestAnimationFrame在页面不是激活的状态下动画会自动暂停

40. 两列等高布局
  给每列加上 padding-bottom: 9999px; margin-bottom: -9999px
  父元素设置：overflow:hidden

41. js中的类型判断
  typeof()    instanceof   Object.prototype.toString.call()

42. 性能优化
  减少 HTTP 请求
  使用内容发布网络（CDN）
  添加本地缓存
  压缩资源文件
  将 CSS 样式表放在顶部，把 javascript 放在底部（浏览器的运行机制决定）
  避免使用 CSS 表达式
  减少 DNS 查询
  使用外部 javascript 和 CSS
  避免重定向
  图片 lazyLoa

43. 跨域
  jsonP
  iframe
  window.name
  CORS
  代理

44. 暂时性死区
  在代码块内，使用let,const命令声明变量之前，该变量都是不可用的，直接报错

45. 三个Promise A,B,C串行执行
A.then(B).then(C).catch(...)
(async() => {
  await a();
  await b();
  await c();
}()

46. js 事件循环
同步-》微任务-》宏任务

47. 手写代码
Function.prototype.applyNew = function(context, args) {
    context.fn = this;
    let res;
    if(!args) {
        res = context.fn();
    } else {
        res = context.fn(...args);
    }
    delete context.fn;
    return res;
}

Function.prototype.callNew = function(context, ...args) {
    context.fn = this;
    let res = context.fn(...args);
    delete context.fn;
    return res;
}

Function.prototype.bindNew = function(context, ...args) {
    return (...newArgs) => {
        this.apply(context, [...args, ...newArgs]);
    }
}

function bianping(array) {
    let res = []
    for(let a of array) {
        if(Array.isArray(a)) {
            res = res.concat(bianping(a));
        } else {
            res.push(a);
        }
    }
    return res;
}

function quchong(arr) {
    return Array.from(new Set(arr))
}

function debounce(fn, wait) {
    let timeout = null;
    return function () {
        let context = this;
        let args = arguments;
        if (timeout) clearTimeout(timeout);
        timeout = setTimeout(() => {
            fn.apply(context, args);
        }, wait);
    }
}

function throttle(fn, wait) {
    let  pre = new Date();
    return function() {
      let context = this;
      let args = arguments;
      let now = new  Date();
      if (now - pre >= wait) {
        fn.apply(context, args);
        pre = now;
      }
    }
  }

function deepClone(obj) {
    // 先判断是对象还是数组
    let copy = obj instanceof Array ? [] : {};
    for (let key in obj) {
      // 判断是否是对象上的属性，而不是原型上的属性
      if (obj.hasOwnProperty(key)) {
        // obj[key] 是否是对象，如果是对象，递归遍历
        copy[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key];
      }
    }
    return copy;
  }

class EventEmitter {
    constructor() {
      this.events = {};
    }
    on (eventName, callback) {
      if(!this.events[eventName]) {
        this.events[eventName] = [callback];
      } else {
        this.events[eventName].push(callback);
      }
    }
  
    emit(eventName, ...args) {
      this.events[eventName].forEach(fn => fn.apply(this, args));
    }
  
    once(eventName, callback) {
      const fn = () => {
        callback();
        this.remove(eventName, fn);
      }
      this.on(eventName, fn)
    }
  
    remove(eventName, callback) {
      this.events[eventName] = this.events[eventName].filter(fn => fn != callback);
    }
  }

function my_instanceof(a,b) {
    let a_proto = a.__proto__;
    let b_proto = b.prototype;
    while(a_proto) {
        if(a_proto === b_proto) {
            return true;
        } else {
            a_proto = a_proto.__proto__;
        }
    }
    return false;
}

var newscript = document.createElement('script');
newscript.src = 'https://www.adb.com?callback=fn'
document.body.appendChild(newscript);
function fn(data) {
  console.log(data);
}

function Sum(...args) {
    let sum = 0;
    for(let arg of args) {
        sum += arg;
    }
    return function(...argus) {
        if(argus.length === 0) return sum;
        let sum2 = argus.reduce((prev, next) => {return prev + next}, 0)
        return Sum(sum + sum2);
    }
}

console.log(Sum(1,2,3,4)(5,6)());


function myNew(fn, ...args) {
    let obj = {};
    obj.__proto__ = fn.prototype;
    let res = fun.apply(obj, args);
    return res instanceof Object ? res : obj;
}

function myInterval(fn, time) {
    let context = this;
    setTimeout(() => {
      fn.call(context);
      myInterval(fn, time);
    }, time);
  }

function trim(str) {
    return str.trim();
}


(function () {
  let Promise = function (execute) {
    this.status = 'pending';
    this.data = null;
    this.callbacks = [];

    let resolve = (value) => {
      if (this.status !== 'pending') return;
      this.status = 'resolved';
      this.data = value;
      if (this.callbacks.length > 0) {
        setTimeout(() => {
          this.callbacks.forEach(cb => {
            cb.onResolved(value);
          })
        }, 0);
      }
    }

    let reject = (reason) => {
      if (this.status !== 'pending') return;
      this.status = 'rejected';
      this.data = reason;
      if (this.callbacks.length > 0) {
        setTimeout(() => {
          this.callbacks.forEach(cb => {
            cb.onRejected(reason);
          })
        }, 0);
      }
    }

    try {
      execute(resolve, reject);
    } catch (error) {
      reject(error);
    }

  }

  Promise.prototype.then = function (onResolved, onRejected) {
    return new Promise((resolve, reject) => {
      let handle = (callback) => {
        try {
          const ret = callback(this.data);
          if (ret instanceof Promise) {
            ret.then(resolve, reject);
          } else {
            reject(ret);
          }
        } catch (error) {
          reject(error)
        }
      }

      onResolved = onResolved instanceof Function ? onResolved : (value) => value;
      onRejected = onRejected instanceof Function ? onRejected : (reason) => { throw reason }

      if (this.status === 'pending') {
        this.callbacks.push({
          onResolved () {
            handle(onResolved);
          },
          onRejected () {
            handle(onRejected);
          }
        })
      } else if (this.status === 'resolved') {
        setTimeout(() => {
          handle(onResolved);
        }, 0);
      } else {
        setTimeout(() => {
          handle(onRejected)
        }, 0);

      }
    })
  }

  Promise.prototype.catch = function (onRejected) {
    return this.then(undefined, onRejected)
  }

  window.Promise = Promise;
})()


45. vue组件间通讯方式
  1.props / $emit
  2.$parent / $children
  3. provide / inject
  4. $refs
  5. eventBus事件总线
  6. vuex

46. vue检测数组变化
  push,shift,pop,splice,unshift,sort,reverse

47. v-for为什么要加key
  key是vue中vnode的唯一标识，通过这个key，可以使的diff操作更准确，快速
  避免复用
  map查询节点比遍历方式快

48. vue-router路由钩子函数执行顺序
  种类有：全局守卫、路由守卫、组件守卫
1、导航被触发。
2、在失活的组件里调用 beforeRouterLeave 守卫。
3、调用全局的 beforeEach 守卫。
4、在重用的组件调用 beforeRouterUpdate 守卫（2.2+）。
5、在路由配置里面 beforeEnter。
6、解析异步路由组件。
7、在被激活的组件里调用 beforeRouterEnter。
8、调用全局的 beforeResolve 守卫（2.5+）。
9、导航被确认。
10、调用全局的 afterEach 钩子。
11、触发 DOM 更新。
12、调用 beforeRouterEnter 守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入。

49. vue渲染过程
1.模板编译过程
Vue 的编译过程就是将 template 转化为 render 函数的过程，分为以下三步：
第一步是将 模板字符串转换成 element ASTs（解析器）
第二步是对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）
第三步是 使用element ASTs 生成 render 函数代码字符串（代码生成器）
2.调用 new Watcher 函数,监听数据的变化,当数据发生变化时，Render 函数执行生成 vnode 对象
3.调用 patch 方法,对比新旧 vnode 对象,通过 DOM diff 算法,添加、修改、删除真正的 DOM 元素

50. vue-router 原理
hash 模式
1、location.has 的值实际就是 URL 中 # 后面的东西。它的特点在于：hash虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。

2、可以为 hash 的改变添加监听事件
window.addEventListener("hashchange",funcRef,false)
每一次改变 hash (window.location.hash)，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现前端路由“更新视图但不重新请求页面”的功能了
特点：兼容性好但是不美观

history 模式
利用 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。

这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础上，他们提供了对历史记录进行修改的功能。这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础

特点：虽然美观，但是刷新会出现 404 需要后端进行配置。

51.视频/音频标签的使用
src
width/height(audio没有)
autoplay
controls
poster 没有播放之前显示的占位图片（audio没有）
loop
preload
muted 静音模式

52.css3新增的特性
圆角边框/边框阴影/边框图像
background-size/background-origin/background-clip
渐变 linear-gradient() / radial-gradient
文本效果
transfrom
transition
animation

53.让chrome显示小于12px的文字：-webkit-text-size-adjust：none

54.css中的选择器：
元素选择器，id选择器，群组选择器，类选择器，通配符选择器，后代选择器
:link/visited/hover/active
空格 > +相邻兄弟选择器 ~通用选择器
n-child / nth-of-type / only-of-type / [attr=value] :root :empty

55.css媒体查询
@media midiatype and|not|only (media feature) {
    CSS-Code;
}

56.三栏布局方式两边固定中间自适应
1.左边左浮动，右边右浮动，中间栏放最后不给宽度
2.左中右都采用绝对定位布局
3.flex布局：中间flex:1
4.表格布局
5.网格布局

57.html5 drag api
dragstart
drag
dragend
dragenter
dragover
drageleave/drop
dataTransfer对象用于从被拖动元素向放置目标传递字符串数据。
event.dataTranfer.setData("text"/"url", "content")
dropEffect与effectAllowed可以用于确定能够对被拖动元素和放置目标执行什么操作
通过在html标签内设置draggable属性draggable="true"/"false"来设置元素是否可拖动

58.画一条0.5px的线
1.<meta name="viewport" content="width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5"/>
2.transform:scale(0.5);

59. css3文本溢出处理
单行：
white-space: nowrap;
text-overflow: ellipsis;
overflow: hidden;
多行：
overflow: hidden;
text-overflow: ellipsis;
display: -webkit-box;
-webkit-line-clamp: 3;
-webkit-box-orient: vertical;

60. js中常见的内存泄漏
1.意外的全局变量
2.被遗忘的计时器或者回调函数
3.脱离DOM的引用
4.闭包

61.ES6新特性
const / let, 模板字符串，箭头函数，函数的参数默认值，对象和数组结构
Promise，for..of, for...in, class extends

62.数组方法
push()：return length
pop(): return deleted element
shift(): return deleted element
unshift(): return length
splice(i,n)：return []
arr.concat(): return result array, arr不变
str.split():将字符串转为数组
arr.join()：将数组转为字符串
arr.sort(function(a,b){return a-b})：升序排序，arr会改变，返回值就是arr

63.Promise
pending , fulfiled , rejected
promise的特点：promise的状态不受外界影响
promise的状态一旦改变，就不会再变了
promise的缺点：无法中途取消promise
当处于pending状态时，无法得知此时是刚刚开始还是即将完成

64.js一次加载一张图片，加载完再加载下一张
//方法一
<script type="text/javascript">
var obj=new Image();
obj.src="http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg";
obj.onload=function(){
alert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);
document.getElementById("mypic").innnerHTML="<img src='"+this.src+"' />";
}
</script>
<div id="mypic">onloading……</div>
 
//方法二
<script type="text/javascript">
var obj=new Image();
obj.src="http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg";
obj.onreadystatechange=function(){
if(this.readyState=="complete"){
alert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);
document.getElementById("mypic").innnerHTML="<img src='"+this.src+"' />";
}
}
</script>
<div id="mypic">onloading……</div>

65.vue核心
1.mvvm
2.数据驱动（视图的内容随着数据的改变而改变）
3.组件化（增加了代码的复用性，可维护性，高内聚低耦合）

66.Vue常用的修饰符
.lazy
.number
.trim
.stop
.prevent
.capture
.self
.once
.enter / .tab / .esc / .space / .up / .down / .left / .right /.ctrl / .alt / .shift / .meta

67.v-text , {{}} ， v-html的区别

68.vue中的路由跳转方式
1.编程式：this.$router.push()
2.声明式：通过<router-link><router-view>

69.vue跨域的解决方式
1.后台更改header
2.jsonp
3.使用http-proxy-middleware(配置代理服务器中间件）

70.vue路由传参（动态路由）的两种方式，params和query的区别
动态路由也可以叫路由传参，就是根据不同的选择在同一个组件渲染不同的内容
用法上：query用path引入，params用name引入，接收参数都是类似的，分别是
this.$route.query.name和this.$route.params.name
展示上：params类似于post, query类似于get，也就是安全问题。params传值相对更
安全点，query通过url传参，刷新页面还在，params刷新页面不在了

71.对vue中keep-alive的理解
概念：keep-alive是vue的内置组件，当它动态包裹组件时，会缓存不活动的组件实例，
它自身不会渲染成一个dom元素也不会出现在父组件链涨
作用：在组建的切换过程中将状态保留在内存中，防止重复渲染dom，
减少加载时间以及性能消耗，提高用户体验。
生命周期函数：Actived在keep-alive组件激活时调用，deactivated在keep-alive组件停用时调用

72.vue中computed和watch的区别
computed:
1.computed是计算属性，也就是以来某个值或者props通过计算来得到数据
2.computed的值实在getter执行后进行缓存的，只有在他依赖的数据发生变化，才会重新调用getter进行计算
3.不支持异步，当computed内有异步操作时无效，无法监听数据的变化
watch
1.watch是监听器，可以监听某一个数据，然后执行相应的操作
2.不支持缓存，数据边直接会触发相应的操作
3.监听的函数接受两个参数，第一个参数是最新的值；第二个参数是之前的值
4.支持异步操作

73.vuex请求异步数据
1.首先在state中创建变量
2.然后再actin中调用封装好的axios请求，异步接收数据，commit提交给mutations
mutations中改变state中的状态，将从action中获取到的值赋值给state





  



































